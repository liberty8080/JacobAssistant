// <auto-generated />
using System;
using JacobAssistant.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JacobAssistant.Migrations
{
    [DbContext(typeof(AssistantDbContext))]
    partial class AssistantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("JacobAssistant.Models.Config", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        
                        ;

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value")
                        
                        ;

                    b.ToTable("config");
                });

            modelBuilder.Entity("JacobAssistant.Models.ConfigType", b =>
                {
                    b.Property<string>("Comment")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment")
                        
                        ;

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_name")
                        
                        ;

                    b.ToTable("config_type");
                });

            modelBuilder.Entity("JacobAssistant.Models.Novel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("author")
                        .HasComment("作者")
                        
                        ;

                    b.Property<string>("Brief")
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("brief")
                        .HasComment("简介")
                        
                        ;

                    b.Property<string>("Cover")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cover")
                        .HasComment("封面")
                        
                        ;

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("DataSource")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("data_source")
                        .HasComment("来源网站")
                        
                        ;

                    b.Property<string>("NovelName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("novel_name")
                        .HasComment("小说名称")
                        
                        ;

                    b.Property<string>("RawId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("raw_id")
                        .HasComment("来源网站的小说id")
                        
                        ;

                    b.Property<string>("RawUrl")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("raw_url")
                        
                        ;

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.ToTable("novel");

                    b
                        .HasComment("小说表");
                });

            modelBuilder.Entity("JacobAssistant.Models.NovelChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ChapterName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("chapter_name")
                        
                        ;

                    b.Property<int?>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<int?>("NovelId")
                        .HasColumnType("int")
                        .HasColumnName("novel_id");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "novel_chapter_novel_content_id_fk");

                    b.HasIndex(new[] { "NovelId" }, "novel_chapter_novel_id_fk");

                    b.ToTable("novel_chapter");
                });

            modelBuilder.Entity("JacobAssistant.Models.NovelContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content")
                        .HasComment("处理好的纯文字内容")
                        
                        ;

                    b.Property<string>("RawContent")
                        .HasColumnType("text")
                        .HasColumnName("raw_content")
                        .HasComment("未经处理的原始数据")
                        
                        ;

                    b.HasKey("Id");

                    b.ToTable("novel_content");
                });

            modelBuilder.Entity("JacobAssistant.Models.NovelChapter", b =>
                {
                    b.HasOne("JacobAssistant.Models.NovelContent", "Content")
                        .WithMany("NovelChapters")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("novel_chapter_novel_content_id_fk");

                    b.HasOne("JacobAssistant.Models.Novel", "Novel")
                        .WithMany("NovelChapters")
                        .HasForeignKey("NovelId")
                        .HasConstraintName("novel_chapter_novel_id_fk");

                    b.Navigation("Content");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("JacobAssistant.Models.Novel", b =>
                {
                    b.Navigation("NovelChapters");
                });

            modelBuilder.Entity("JacobAssistant.Models.NovelContent", b =>
                {
                    b.Navigation("NovelChapters");
                });
#pragma warning restore 612, 618
        }
    }
}
